# 우리는 스마트폰을 사용하면서 여러 가지 앱(App)을 실행하게 된다. 대개의 경우 화면에 보이는 ‘실행 중’인 앱은 하나뿐이지만 보이지 않는 상태로 많은 앱이 '활성화'되어 있다. 앱들이 활성화 되어 있다는 것은 화면에 보이지 않더라도 메인 메모리에 직전의 상태가 기록되어 있는 것을 말한다. 현재 실행 중이 아니더라도 이렇게 메모리에 남겨두는 이유는 사용자가 이전에 실행하던 앱을 다시 불러올 때에 직전의 상태를 메인 메모리로부터 읽어 들여 실행 준비를 빠르게 마치기 위해서이다.

# 하지만 스마트폰의 메모리는 제한적이기 때문에 한번이라도 실행했던 모든 앱을 활성화된 채로 메인 메모리에 남겨두다 보면 메모리 부족 상태가 오기 쉽다. 새로운 앱을 실행시키기 위해 필요한 메모리가 부족해지면 스마트폰의 운영체제는 활성화 되어 있는 앱들 중 몇 개를 선택하여 메모리로부터 삭제하는 수밖에 없다. 이러한 과정을 앱의 ‘비활성화’라고 한다.

# 메모리 부족 상황에서 활성화 되어 있는 앱들을 무작위로 필요한 메모리만큼 비활성화 하는 것은 좋은 방법이 아니다. 비활성화된 앱들을 재실행할 경우 그만큼 시간이 더 필요하기 때문이다. 여러분은 이러한 앱의 비활성화 문제를 스마트하게 해결하기 위한 프로그램을 작성해야 한다

# 현재 N개의 앱, A1, ..., AN이 활성화 되어 있다고 가정하자. 이들 앱 Ai는 각각 mi 바이트만큼의 메모리를 사용하고 있다. 또한, 앱 Ai를 비활성화한 후에 다시 실행하고자 할 경우, 추가적으로 들어가는 비용(시간 등)을 수치화 한 것을 ci 라고 하자. 이러한 상황에서 사용자가 새로운 앱 B를 실행하고자 하여, 추가로 M 바이트의 메모리가 필요하다고 하자. 즉, 현재 활성화 되어 있는 앱 A1, ..., AN 중에서 몇 개를 비활성화 하여 M 바이트 이상의 메모리를 추가로 확보해야 하는 것이다. 여러분은 그 중에서 비활성화 했을 경우의 비용 ci의 합을 최소화하여 필요한 메모리 M 바이트를 확보하는 방법을 찾아야 한다.

# 5 60
# 30 10 20 35 40
# 3 0 3 5 4

INF = 987654321

n, m = map(int, input().split())

byte_list = [0] + list(map(int, input().split()))
cost_list = [0] + list(map(int, input().split()))

# m을 확보하기 위해 필요한 최소의 비용

# 배낭 문제는 weight에 맞는 최대 value 구하기
# 이 문제는 weight에 맞는 최소 cost 구하기

cost_range = sum(cost_list)+1

d = [[0]*cost_range for _ in range(n+1)]

# 60바이트를 확보하기 위해
# 30 10 20 35 40 byte 별 (value)
# 3  0  3   5  4 최소cost 구하기 (weight)
# weight(cost) 별로 얼마나 많은 value(byte)를 담을 수 있냐 -> m+1이 아니라 sum(cost_list)+1

for i in range(1, n+1):
    value = byte_list[i]
    weight = cost_list[i]
    for j in range(0, cost_range): # j == dp 인덱스의 byte
        if weight > j:
            d[i][j] = d[i-1][j]
        else:
            d[i][j] = max(d[i-1][j], d[i-1][j-weight] + value)

result = 0
for i in range(cost_range):
    if d[-1][i] >= m:
        result = i
        break

for i in d:
    print(d)
print(result)